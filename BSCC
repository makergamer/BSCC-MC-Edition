#!/bin/bash
#Add Color for help list
red='\e[0;31m'
green='\e[1;32m'
yellow='\e[1;33m'
source /opt/BSCC/Files/conf.cfg

######################
###Add Debug checks###
######################
function DEBUG()
{
 [[ "$_DEBUG" == "on" ]] &&  $@
}
if [[ $_DEBUG = "on" ]];then
exec > >(tee -i $INSTALL_LOC/Files/debug_log)
exec 2>&1
fi

do_debug() {
Qdebug=$(whiptail --fb --inputbox "Enable debug? on/off" 10 80 $_DEBUG --title "DEBUG on/off" 3>&1 1>&2 2>&3)
exitstatus=$?
#Check if debug was toggled
if [[ ! $Qdebug = $_DEBUG ]]; then
if [[ $exitstatus = 0 ]]; then
    sed -i 's/_DEBUG=.*/_DEBUG='${Qdebug}'/g' $INSTALL_LOC/Files/conf.cfg
    clear
    echo "Please relaunch BSCC, Debug toggled."
    exit 0
fi
fi
}

###################################################
#To view Debug log correctly use this command on it
#sed -i '/K$/d' debug_log #
###################################################
DEBUG set -x

INTERACTIVE=True
ASK_TO_REBOOT=0
CONFIG=$INSTALL_LOC/Files/conf.cfg
RSYNC=$INSTALL_LOC/rsync_backup
ARCHIVE=$INSTALL_LOC/archive

#Extra Functions for Cronjobs and Debugs (Down the road)
clear

do_update() {
$INSTALL_LOC/Files/update.sh
}

do_adminpass() {
ADMIN_AREA=$(whiptail --passwordbox "Enter Password:" 8 30 --title "password dialog" 3>&1 1>&2 2>&3)
exitstatus=$?
if [[ $ADMIN_PASS == "$ADMIN_AREA"  ]]; then
whiptail --ok-button Done --msgbox "Correct password" 10 30
do_admin
else
whiptail --ok-button Done --msgbox "Incorrect password" 10 30
fi
}

do_no_menu_start() {
  source /opt/BSCC/Files/conf.cfg
  if ! screen -list | grep -q "Minecraft"; then
     cd $DIR
     $START
     sed -i 's/check=.*/check=true/g' $CONFIG
  else
     echo "Server was found running... close it before running this"
  fi
  if ! screen -list | grep -q "WATCH"; then
     cd $INSTALL_LOC/Files/
     $WATCH
  fi
  if ! screen -list | grep -q "IN_GAME"; then
    $IN_GAME
fi
}

do_no_menu_stop() {
  if screen -list | grep -q "Minecraft"; then
    sed -i 's/check=.*/check=false/g' $CONFIG
    do_save
    sleep 2
    screen -S Minecraft -p 0 -X stuff "stop$(printf \\r)"
    screen -X -S WATCH_LOGIN quit
    screen -X -S VANILLA_BACKUP quit
    screen -X -S IN_GAME quit
  else
     echo "No server was found to be running...did you start on?"
  fi
}

do_save() {
screen -S Minecraft -p 0 -X stuff "save-all$(printf \\r)"
}

do_leveltype() {
while true; do
FUN=$(whiptail --fb --title "Level Type" --menu "Please select a Level Type"  --cancel-button Exit --ok-button Select 20 80 4 \
        "1 DEFAULT" "[Standard world with hills, valleys, water, etc.]" \
        "2 FLAT" "[A flat world with no features, meant for building.]" \
        "3 LARGEBIOMES" "[Same as default but all biomes are larger.]" \
        "4 AMPLIFIED" "[Same as default but world-generation height limit is increased.]" \
        3>&1 1>&2 2>&3)
RET=$?
if [[ $RET -eq 1 ]]; then
    break
  elif [[ $RET -eq 0 ]]; then
    case "$FUN" in
      1\ *) echo "level-type=DEFAULT" > $SERVER_PROP; break ;;
      2\ *) echo "level-type=FLAT" > $SERVER_PROP; break ;;
      3\ *) echo "level-type=LARGEBIOMES" > $SERVER_PROP; break ;;
      4\ *) echo "level-type=AMPLIFIED" > $SERVER_PROP; break ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
fi
done
}

do_Qboot() {
crontabs="/var/spool/cron/crontabs"
##Setup on boot requests.
if (whiptail --fb --title "Start Server on bootup?" --yes-button "Yes" --no-button "No"  --yesno "Would You like the server to startup on boot?" 10 60) then
    sed -i 's/startonboot=.*/startonboot=true/g' $CONFIG
    sudo sed -i".bak" '/BSCC boot/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "@reboot BSCC boot") | crontab -
else
    sed -i 's/startonboot=.*/startonboot=false/g' $CONFIG
    sudo sed -i".bak" '/BSCC boot/d' /var/spool/cron/crontabs/$USER
fi
}

do_onboot() {
    if [[ $startonboot = "true" ]]
then
  echo "Starting server"
  cd $DIR
  $START
  cd $INSTALL_LOC/Files/
  $WATCH
else
  echo "Set Onboot was not selected"
fi
exit 0
}

do_reload() {
if ! screen -list | grep -q "Minecraft"; then
    cd $DIR
    $START
    sed -i 's/check=.*/check=true/g' $CONFIG
    cd $INSTALL_LOC/Files/
    $WATCH
fi
exit 0
}

do_check() {
  if [[ $check = "true" ]]
then
  do_reload
fi
exit 0
}

do_restart() {
sed -i 's/check=.*/check=false/g' $CONFIG
screen -S Minecraft -p 0 -X stuff "save-all$(printf \\r)"
screen -S Minecraft -p 0 -X stuff "say Restart in 1 Minutes..WHY ARE YOU STILL HERE!!!$(printf \\r)"
sleep 50
screen -S Minecraft -p 0 -X stuff "say 10 seconds..$(printf \\r)"
sleep 10
screen -S Minecraft -p 0 -X stuff "stop$(printf \\r)"
sleep 3
screen -X -S WATCH_LOGIN quit
screen -X -S VANILLA_BACKUP quit
sleep 10
cd $INSTALL_LOC/Files/
$WATCH
cd $DIR
$START
sed -i 's/check=.*/check=true/g' $CONFIG
exit 0
}

do_restart_now() {
sed -i 's/check=.*/check=false/g' $CONFIG
screen -S Minecraft -p 0 -X stuff "say Server is going down.... Please log NOW!$(printf \\r)"
screen -S Minecraft -p 0 -X stuff "save-all$(printf \\r)"
sleep 10
screen -S Minecraft -p 0 -X stuff "stop$(printf \\r)"
sleep 10
cd $DIR
$START
sed -i 's/check=.*/check=true/g' $CONFIG
exit 0
}

do_archive() {
  ###Create a save prior, without this the world wont be up to date.
  do_save
  ##Grab conf file for restores..
  rm $DIR/conf.cfg
  cp $INSTALL_LOC/Files/conf.cfg $DIR/conf.cfg
  today=$(date '+%Y-%mM-%dD_%HH_%MM_%SS')
  cd $ARCHIVE
  screen -S Minecraft -p 0 -X stuff "say Creating Archive of the server, Sorry for any lag.$(printf \\r)"
  clear
  echo -e ${green}"Making archive...Please wait 5 seconds."
  tput sgr0
  sleep 4
  tar -zcvf "$today".tar.gz -C $DIR .
  rm `ls -t | awk 'NR>8'` 2>/dev/null
  screen -S Minecraft -p 0 -X stuff "say Archive complete, carry on... :($(printf \\r)"
}

do_rollback() {
if ! screen -list | grep -q "Minecraft"; then
sed -i 's/check=.*/check=false/g' $CONFIG
rm -rf $DIR/*
rsync -r -t $RSYNC/* $DIR
cd $DIR
$START
sed -i 's/check=.*/check=true/g' $CONFIG
else
sed -i 's/check=.*/check=false/g' $CONFIG
screen -S Minecraft -p 0 -X stuff "say Going down for rollback!$(printf \\r)"
sleep 10
screen -S Minecraft -p 0 -X stuff "stop$(printf \\r)"
sleep 20
do_rollback
fi
}

do_restore() {
if [[ "$(ls -A $INSTALL_LOC/archive)" ]]; then
  unset restore
  unset selected_restore
  restore=`ls -1t $INSTALL_LOC/archive | awk '{print $1 " |"}'`
  restore=(${restore[@]})
if ! screen -list | grep -q "Minecraft"; then
  sed -i 's/check=.*/check=false/g' $CONFIG
  selected_restore=$(whiptail --menu --fb "Select your restore point" 20 60 10 ${restore[@]} 3>&1 1>&2 2>&3)
  RET=$?
  if [[ $RET -eq 1 ]]; then
  break
  fi
  rm -rf $DIR/*
  cp $INSTALL_LOC/archive/$selected_restore $DIR/restore.tar.gz
  cd $DIR
  tar -xvf restore.tar.gz
  rm restore.tar.gz
  rm $INSTALL_LOC/Files/conf.cfg
  mv $DIR/conf.cfg $INSTALL_LOC/Files/
  source /opt/BSCC/Files/conf.cfg
  do_start
  sed -i 's/check=.*/check=true/g' $CONFIG

#Just incase something went really bad...
if [[ ! -f $DIR/$SERVERJAR ]]; then
    do_fallback
fi
  whiptail --msgbox --fb "Your server should now be restored and loading up.." 20 50 0
  exit 0
else
  sed -i 's/check=.*/check=false/g' $CONFIG
  screen -S Minecraft -p 0 -X stuff "say Going down for rollback!$(printf \\r)"
  sleep 5
  whiptail --msgbox --fb "Server was found running.. Hit ok and wait up to 20 seconds to recheck." 20 50 0
  screen -S Minecraft -p 0 -X stuff "stop$(printf \\r)"
for ((i=20;i>0;i=i-1)); do
  clear
if screen -list | grep -q "Minecraft"; then
  clear
  echo -n "Time Remaining $i seconds"
  sleep 1
else
  break
fi
done
fi
else
whiptail --msgbox --fb "No Archives found.." 10 60 0
fi
}

do_user_backup() {
UBACKUP=$(whiptail --fb --inputbox "Where whould you like to save an archive to?" 8 78 $HOME/ --title "User Backups" 3>&1 1>&2 2>&3)
RET=$?
if [[ $RET -eq 1 ]]; then
  break
fi
  whiptail --fb --msgbox "This will take a second to do and will also stop your server, Don't hit Ok until your ready for your server to go down." 20 60 0
  do_save  
  do_no_menu_stop
for ((i=120;i>0;i=i-1)); do
        clear
        if screen -list | grep -q "Minecraft"; then
        clear
        echo -n "Waiting for Minecraft to stop for a clean backup!. Time Remaining $i seconds"
        sleep 1
        else
  cd $UBACKUP
  rm -f USERBSCCWORLDBACKUP.tar.gz
  rm $DIR/conf.cfg
  cp $INSTALL_LOC/Files/conf.cfg $DIR/conf.cfg
  tar -zcvf USERBSCCWORLDBACKUP.tar.gz -C $DIR .
  whiptail --fb --msgbox "You should now have a file called USERBSCCWORLDBACKUP.tar.gz in this location: $UBACKUP You can use this for restores on different systems later on." 20 60 0
  break
  fi
done
  #Last check to see if it's failed..
  if screen -list | grep -q "Minecraft"; then
  whiptail --fb --msgbox "This server never stopped!, A user defined backup wont' be ran. Please try stopping it first." 20 60 0
  fi
}

do_stats() {
UPTIME=$(uptime | awk '{print $1}')
LOAD=$(uptime | grep -o "load average.*" | awk '{print $3,$4,$5}')
TOTAL=$(du -sh $INSTALL_LOC | awk '{print $1}')
##Put CPU usage on call instead of conf.cfg, Fix for slow Menu load##
#####################################################################
cpufree=$(mpstat 1 1 | tail -n 1 | awk '{printf $12}')
CPU=$(echo "scale=1; x=100-$cpufree; if(x<1) print 0; x" | bc)

screen -S Minecraft -p 0 -X stuff "say "$RAM\B" Ram free out of "$RAM_TOTAL\B"$(printf \\r)"
screen -S Minecraft -p 0 -X stuff "say This server is now "$TOTAL\B" in size & "$HDDFREE\B" Free.$(printf \\r)"
screen -S Minecraft -p 0 -X stuff "say The CPU is currently running at "$CPU\%"$(printf \\r)"
screen -S Minecraft -p 0 -X stuff "say Uptime: $UPTIME$(printf \\r)"
screen -S Minecraft -p 0 -X stuff "say Load Average (1M 5M 15M): $LOAD$(printf \\r)"
}

do_rsync() {
if ! screen -list | grep -q "Minecraft"; then
echo "no server running"
else
do_save
sleep 1
screen -S Minecraft -p 0 -X stuff "say Backup was requested, Backing up...$(printf \\r)"
rsync -r -t $DIR/* $RSYNC
screen -S Minecraft -p 0 -X stuff "say Backup completed.$(printf \\r)"
fi
}

do_vanilla_inventory() {
WORLD=$(cat /opt/BSCC/minecraft_server/server.properties | grep -o "level-name.*" | cut -d "=" -f2)
PLAYERDATA="/opt/BSCC/minecraft_server/$WORLD/playerdata/"
ALLTIME="/opt/BSCC/Files/Alltimeusers.list"
ON="/opt/BSCC/Files/onlineusers.list"
VPLAYER_BACKUP="/opt/BSCC/PD_Backup/"
VPLAYER=$(cat $ALLTIME | cut -d "=" -f1 | awk '{print $1 " |"}')

unset vanilla_player res_playarr selected_backup UUID
vanilla_player=$(whiptail --menu "Vanilla Inventory recovery" 20 60 7 ${VPLAYER[@]} 3>&1 1>&2 2>&3)
RET=$?
if [[ $RET -eq 0 ]]; then
selected_backup=$(ls -lh1t $VPLAYER_BACKUP$vanilla_player | awk '{print $9,$5}' | head -36)
UUID=$(cat $ALLTIME | grep "$vanilla_player" | cut -d "=" -f2)
else
if [[ $RET -eq 1 ]]; then
do_menu
fi
fi

##########################################
### Got user and should have the list. ###
##########################################
res_playarr=$(whiptail --menu "Newest Inventory (YYMMDD-HHMMSS)" 20 60 7 ${selected_backup[@]} 3>&1 1>&2 2>&3)
RET=$?
if [[ $RET -eq 0 ]]; then
cd $VPLAYER_BACKUP$vanilla_player
if [[ $vanilla_player ]]; then
                if [[ "$(grep $vanilla_player $ON)" = $vanilla_player ]]; then
                        echo "this player is in this list"
                        screen -S Minecraft -p 0 -X stuff "tell $vanilla_player Attempting to restore this data!, You will be kicked$(printf \\r)"
                        sleep 4
                        screen -S Minecraft -p 0 -X stuff "/kick $vanilla_player$(printf \\r)"
                        while inotifywait -e create $PLAYERDATA$UUID.dat; do echo "it changed"; done
                        cp $res_playarr $PLAYERDATA$UUID.dat
                        cd /opt/BSCC/Files
                else
                        cp $res_playarr $PLAYERDATA$UUID.dat
                        cd /opt/BSCC/Files
                fi
        fi
echo "task completed"
fi
}

do_inventory() {
clear
#Check that the mods are actually installed...
if [[ ! -f $DIR/mods/OpenB* ]]; then
if (whiptail --title  "Plugin Missing!" --fb --yesno "Openblocks not found!, Do you want to use vanilla recovery?" 12 78) then
    sed -i 's/VANILLA=.*/VANILLA=true/g' $CONFIG
    do_vanilla_inventory
fi
else
sed -i 's/VANILLA=.*/VANILLA=false/g' $CONFIG
#Grab User from player list.
unset playarr
playarr=`cat $PLAYERS | awk '{print $1 " |"}'`
playarr=(${playarr[@]})
unset selected_player
selected_player=$(whiptail --menu "OpenBlocks Inventory Restore Center" 20 60 10  ${playarr[@]} 3>&1 1>&2 2>&3)
RET=$?
if [[ $RET -eq 0 ]]; then
#Grab all deaths from the users in data folder.
unset new_playarr
new_playarr=`ls -1t $INVENTORY_DIR | grep "inventory-$selected_player" | grep "death" | awk '{print $1 " |"}'`
new_playarr=(${new_playarr[@]})
else
if [[ $RET -eq 1 ]]; then
do_menu
fi
fi
unset res_playarr
#issue restore from selected file.
res_playarr=$(whiptail --menu "Newest Deaths up top!" 20 60 5 ${new_playarr[@]} 3>&1 1>&2 2>&3)
RET=$?
if [[ $RET -eq 0 ]]; then
echo $res_playarr
screen -S Minecraft -p 0 -X stuff "say Attempting to restore this data! $selected_player$(printf \\r)"
screen -S Minecraft -p 0 -X stuff "/ob_inventory restore $selected_player $res_playarr$(printf \\r)"
else
if [[ $RET -eq 1 ]]; then
do_inventory
fi
fi
fi
}

do_eula() {
#eula.txt Should be there. If not then something went wrong and should say so now.
#source BSCC
if [[ ! -f $DIR/eula.txt ]]; then
     whiptail --msgbox --fb "Something is wrong here, there is no eula.txt file to be found." 20 60
        exit 0
fi

usereula=`cat $DIR/eula.txt`
#EULA Needs to be accepted by the user
if (whiptail --title "EULA AGREEMENT" --fb --yesno "$usereula" --yes-button true --no-button false 15 60) then
    sed -i 's/eula=.*/eula=true/g' $DIR/eula.txt
else
    sed -i 's/eula=.*/eula=false/g' $DIR/eula.txt
    whiptail --msgbox --fb "Without accepting the eula agreement you won't be able to start this server. Run (BSCC eula) to accept again." 20 60
    exit 0
fi
}

do_console() {
  if ! screen -list | grep -q "Minecraft"; then
        whiptail --msgbox --fb "There is no server running." 20 60 0
        do_admin
  fi
do_command() {
INPUT=$(whiptail --fb --inputbox "Enter a console command or chat here:" 10 80 --title "Full Console Control" 3>&1 1>&2 2>&3)
RET=$?
if [[ $RET -eq 0 ]]; then
screen -S Minecraft -p 0 -X stuff "`printf "$INPUT\r"`";
fi

}
if [[ -f /opt/BSCC/minecraft_server/logs/latest.log ]]; then
log="/opt/BSCC/minecraft_server/logs/latest.log"
else
log="/opt/BSCC/minecraft_server/server.log"
fi

while :
do
   read -t 1 -n 1 key
   if [[ $key = c ]]
then
      do_command
   else
      clear
        if ! screen -list | grep -q "Minecraft"; then
        echo "Server not found...exiting"
        exit 1
else
        echo -e ${green}"PRESS C TO TYPE IN CONSOLE, OR Q TO EXIT (Might need to hit twice!)"
	tput sgr0
        cat $log | tail -20
        read -t 1 -n 1 key
        if [[ $key = q ]]
then
        do_admin
fi
fi
fi
done
}

do_ram() {
##Setting up Memory alocation to the server
#################################
USERMAX=$(whiptail --inputbox "Please select a MAXMEM Default is 512M" 8 78 $MAXMEM --title "Total Ram Available:$RAM" 3>&1 1>&2 2>&3)
exitstatus=$?
if [[ $exitstatus = 0 ]]; then
    sed -i 's/MAXMEM=.*/MAXMEM='$USERMAX'/g' $CONFIG
else
    sed -i 's/MAXMEM=.*/MAXMEM=512M/g' $CONFIG
fi

USERMIN=$(whiptail --inputbox "Please select a MINMEM Default is 128M. (MUST BE LOWER THEN MAXMEM)" 8 78 $MINMEM --title "Total Ram Available:$RAM" 3>&1 1>&2 2>&3)
exitstatus=$?
if [[ $exitstatus = 0 ]]; then
    sed -i 's/MINMEM=.*/MINMEM='$USERMIN'/g' $CONFIG
else
    sed -i 's/MINMEM=.*/MINMEM=128M/g' $CONFIG
fi
}

do_first_run() {
(
        sleep 1
        echo XXX
        echo 20
        echo "Inputing user selection"
        echo XXX
        sleep 1
        echo XXX
        echo 40
	echo "Attemping to start server"
        echo XXX
        sleep 1
        echo XXX
        echo 60
        echo "Attemping to starting server (Allowing 20 seconds for first load)"
	source /opt/BSCC/Files/conf.cfg
	cd $DIR
	$START
        echo XXX
        #Allow time for the server to load and crash due to eula.
        for ((i=120;i>0;i=i-1)); do
 	        clear
	       if [[ ! -f $DIR/eula.txt ]]; then
  	       clear
  	       echo -n "Time Remaining $i seconds"
  	       sleep 1
	      else
	       screen -X -S Minecraft quit
  	       break
	      fi
	      done
        #If server doesn't go down, Force it.
        echo XXX
        echo 80
        echo "Searching for User Agreements"
        echo XXX
        sleep 1
        echo XXX
        echo 100
        echo "Finishing up."
        echo XXX
        sleep 2
) | whiptail --gauge "Gathering info" 8 40 0
#eula.txt Should be there. If not then something went wrong and should say so now.
if [[ ! -f $DIR/eula.txt ]]; then
     whiptail --msgbox --fb "Something is wrong here, there is no eula.txt file to be found." 20 60
#Make a point to see if java is present or not
	java -version
	ls -l $DIR/
        rm -rf $DIR/*
        screen -ls | grep Minecraft | cut -d. -f1 | awk '{print $1}' | xargs kill
        sed -i 's/SERVERJAR=.*/SERVERJAR=/g' $CONFIG
        exit 0
fi

#EULA Needs to be accepted by the user
do_eula
do_Qboot
do_leveltype
#All done here
whiptail --fb --title "YOUR ALL SETUP!!!" --msgbox "Well if your seeing this it means that there is a good chance that your server is all setup and read to go. Give it some time to load and enjoy. Run BSCC for more info" 20 60
##Check for upgrade path##
if [[ -d /opt/BSCC/upgrade_backup ]]; then
	do_upgrade
fi
exit 0
}

#Fallback incase the Server jar isn't found or is missing after restore..
do_fallback() {
fallback=`ls $DIR | grep ".*.jar" | awk '{print $1 " |"}'`
fallback=(${fallback[@]})
if [[ ! -f $DIR/$SERVERJAR ]]; then
whiptail --msgbox --fb "Looks like your Server jar is not set. Please try a fallback from the list.." 20 60 0
fallback_attempt=$(whiptail --menu "These are the Jar files we found." 20 60 3 ${fallback[@]} 3>&1 1>&2 2>&3)
sed -i 's/SERVERJAR=.*/SERVERJAR='$fallback_attempt'/g' $CONFIG
fi
}


##Setup Minecraft server
#########################
#Select Version of Minecraft and download.
do_vanilla() {
if [[ ! -d $INSTALL_LOC/Files/versions ]]; then
mkdir $INSTALL_LOC/Files/versions
fi
cd $INSTALL_LOC/Files/
#Download Manifest
wget https://launchermeta.mojang.com/mc/game/version_manifest.json -O versions.json


#Grab the Json's for the versions and orginize them.
clear
echo "DOWNLOAD BEGINNING!!"
cat versions.json | ./JSON.sh -l | grep -o https.* | cut -d "\"" -f1 > versions/url.txt
cd versions
sed -i '/-pre/,+1 d' url.txt
sed -i '/-Pre/,+1 d' url.txt
cat url.txt | xargs -n 1 -P 20 wget -nc -q
echo "DOWNLOAD COMPLETE!!"
#sleep 2
rm 1.0.* 1.1.json 1.2.1.json 1.2.2.json 1.2.3.json 1.2.4.json

##Place list's into an arrey
rm $INSTALL_LOC/Files/versions/tmp.list
rm $INSTALL_LOC/Files/versions/this.tmp
rm $INSTALL_LOC/Files/versions/vanilla.list
rm $INSTALL_LOC/Files/versions/vanilla.tmp
ls -1t 1.* | cut -d "j" -f1 > tmp.list
sed 's/.$//' tmp.list > this.tmp
cat this.tmp
cat this.tmp | awk '{print $1 " |"}' > $INSTALL_LOC/Files/versions/vanilla.tmp
cat vanilla.tmp
cat vanilla.tmp | sort -Vr vanilla.tmp > $INSTALL_LOC/Files/versions/vanilla.list
rm $INSTALL_LOC/Files/versions/tmp.list
rm $INSTALL_LOC/Files/versions/vanilla.tmp
rm $INSTALL_LOC/Files/versions/vanilla.tmp
var=$(cat vanilla.list)
var=(${var[@]})
vanilla_select=$(whiptail --menu "Please Select your Version." 20 60 10 ${var[@]} 3>&1 1>&2 2>&3)
getlink=$(cat $INSTALL_LOC/Files/versions/$vanilla_select\.json | jq -r '.downloads | .server | .sha1' $vanilla_select\.json)
dl_link=$(echo https://launcher.mojang.com/v1/objects/$getlink/server.jar)
getsize=$(jq -r '.downloads | .server | .size' $vanilla_select\.json)
dl_size=$(echo $getsize | awk '{ byte = $1 /1024/1024 ; print byte " MB"}')
echo $dl_size
RET=$?
wget --spider $dl_link
if [[ $? -eq 0 ]]; then
clear
echo "Checking Download link: $dl_link"
sleep 2
echo "Verifying the Link"
sleep 2
echo "Link Confirmed good, Downloading"
echo "Download starting..."
echo -e "Download size is:${yellow}$dl_size"
tput sgr0
sleep 3
else
whiptail --msgbox --fb "Download not found!. Please report this message on Youtube or the Forum and provide this link. \n
Attempting to download: $dl_link" 20 60 0
exit 1
fi

#Check the download and if failed remove the file.
clear
r=`wget -O $DIR/$vanilla_select\.jar $dl_link`
if [[ $? -ne 0 ]]; then
rm $DIR/$vanilla_select\jar
whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
sed -i 's/SERVERJAR=.*/SERVERJAR=/g' $CONFIG
The current link is: $dl_link" 20 60
  else
sed -i 's/MCVERSION=.*/MCVERSION='$vanilla_select'/g' $CONFIG
sed -i 's/SERVERJAR=.*/SERVERJAR='$vanilla_select\.jar'/g' $CONFIG
sed -i 's/VANILLA=.*/VANILLA=true/g' $CONFIG
sed -i 's/SERVER_TYPE.*/SERVER_TYPE=VANILLA/g' $CONFIG
echo $vanilla_select

do_ram
do_first_run
fi
}

do_spigot() {
unset spigot_list spigot_servers r dl_link
cd /opt/BSCC/Files/
wget https://yivesmirror.com/downloads/spigot -O spigot.html
himalaya spigot.html spigot.json
spigot_list=$(cat spigot.json | grep -ow "spigot-1.*R0.1-SNAPSHOT.*.jar" | cut -c 8- | sort -gu | sort -Vr | awk '{print $1 " |"}')
#Present User with selected Spigot servers from list.
spigot_list=(${spigot_list[@]})
spigot_servers=$(whiptail --menu "Select Your Spigot server." 20 60 10 ${spigot_list[@]} 3>&1 1>&2 2>&3)
RET=$?
  if [[ $RET -eq 1 ]]; then
    exit 1
  elif [[ $RET -eq 0 ]]; then
dl_link=$(echo "https://yivesmirror.com/files/spigot/spigot-$spigot_servers")

#Check the download and if failed remove the file.
clear
r=`wget $dl_link -O $DIR/spigot-$spigot_servers`
if [[ $? -ne 0 ]]; then
rm $DIR/-spigot$spigot_servers
whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
The current link is: $dl_link" 20 60
 else
sed -i 's/MCVERSION=.*/MCVERSION='spigot-$spigot_servers'/g' $CONFIG
sed -i 's/SERVERJAR=.*/SERVERJAR='spigot-$spigot_servers'/g' $CONFIG
sed -i 's/SERVER_TYPE.*/SERVER_TYPE=SPIGOT/g' $CONFIG
do_ram
do_first_run
fi
fi
}

do_ftb() {
# this will get all the ftb server names...
if [[ ! -f /opt/BSCC/Files/modpacks.xml ]]; then
cd /opt/BSCC/Files/
wget http://ftb.cursecdn.com/FTB2/static/modpacks.xml
fi

unset server
server=$(cat /opt/BSCC/Files/modpacks.xml | grep -o serverPack.* | grep url | awk '{print $1}' | cut -d "=" -f2 | cut -d "\"" -f2 | grep .zip | awk '{print $1}' | grep -v '^$' | awk '{print $1 " |"}')
#echo $server
server=(${server[@]})

#List all the servers by thier Server name.
unset var
var=$(whiptail --menu "Please Select your FTB Server" 20 80 10 ${server[@]} 3>&1 1>&2 2>&3)
echo $var
RET=$?
if [[ $RET -eq 0 ]]; then
name1=$(awk -v var="$var" 'BEGIN {print var}' | awk -F 'Server|server|[-]' '{print $1}')
name2=$(awk -v var="$var" 'BEGIN {print var}' | awk -F 'Server|server|[_-]' '{print $1}')
echo $name1
############################################
#######Dirty fix for older Versions ########
####### Of FTB                      ########
############################################
if [[ $name1 = RetroSMP_ ]]; then
name1=FTBRETROSMP
fi
if [[ $name1 = TechWorld_ ]]; then
name1=Tech_World
fi
if [[ $name1 = MagicWorld_ ]]; then
name1=Magic_World
fi
if [[ $name1 = MagicWorld2 ]]; then
name1=Magic_World_2
fi
if [[ $name1 = Direwolf20_ ]]; then
name1=Direwolf20
fi
if [[ $name1 = Direwolf20 ]]; then
name1=Direwolf20_1_6_4
fi
###########################################
###########################################
###########################################

#Ask what Version they would like to download
unset old
old=$(cat /opt/BSCC/Files/modpacks.xml| grep $var | grep -o oldVersions.* | cut -d "=" -f2 | tr ';' ' | ' | cut -d "\"" -f2 | tr " " "\n" | awk '{print $1 " |"}')
old=(${old[@]})
##Check if the server only has a repo build!###
check=$(awk -v var="$old" 'BEGIN {print var}' | cut -d "|" -f1)
if [[ -z "$check" ]]; then
old=$(cat /opt/BSCC/Files/modpacks.xml | grep $var | grep -o repo.* | cut -d "=" -f2 | cut -d "\"" -f2 | awk '{print $1 " |"}')
fi
elif [[ $RET -eq 1 ]]; then
return $RET
exit 0
fi

version_select=$(whiptail --menu --fb "Pick your Version  Please" 20 60 10 ${old[@]} 3>&1 1>&2 2>&3)
RET=$?
if [[ $RET -eq 0 ]]; then
#use this to get the version
version=$(awk -v var="$version_select" 'BEGIN {print var}' | sed 's/\./_/g')


#Check for download and attempt the name change.
dl_link="http://ftb.cursecdn.com/FTB2/modpacks/$name1/$version/$var"
wget --spider $dl_link
if [[ $? -eq 0 ]]; then
clear
echo "Checking Download link: $dl_link"
#sleep 2
echo "Verifying the Link"
#sleep 2
echo "Link Confirmed good, Downloading"
#sleep 2
else
echo "Bad link attempting 2nd one"
dl_link="http://ftb.cursecdn.com/FTB2/modpacks/$name2/$version/$var"
wget --spider $dl_link
if [[ $? -eq 0 ]]; then
clear
echo "Checking Download link (2nd): $dl_link"
#sleep 2
echo "Verifying the Link"
#sleep 2
echo "Link Confirmed good, Downloading"
#sleep 2
else
whiptail --msgbox --fb "Download not found!. Please report this message on Youtube or the Forum and provide this link. \n
Attempting to download: $dl_link" 20 60 0
exit 1
fi
fi

##Download link works pull it down.
wget -O $DIR/$var $dl_link
sed -i 's/MCVERSION=.*/MCVERSION='$var'/g' $CONFIG
sed -i 's/SERVER_TYPE.*/SERVER_TYPE=FTB/g' $CONFIG
do_ram
cd $DIR
if ! unzip $var; then
    whiptail --msgbox --fb "Download file didn't extract properly, Clearing Server folder!" 20 60 0
    rm -rf $DIR/*
    clear
    echo "Please check your internet and maybe the link on another machine. Link: $dl_link"
    exit 1
fi

#Some OLD FTB used this directory
if [[ -d $DIR/Feed\ The\ Beast\ Insanity\ Co-op/ ]]; then
mv $DIR/Feed\ The\ Beast\ Insanity\ Co-op/* $DIR
rm -rf $DIR/Feed\ The\ Beast\ Insanity\ Co-op/
fi

if [[ -f $DIR/FTBInstall.sh ]]; then
sh FTBInstall.sh

#Found some FTB that don't have FTBserver.jar in them...
if [[ -f $DIR/FTBserver.jar ]]; then
  sed -i 's/SERVERJAR=.*/SERVERJAR=FTBserver.jar/g' $CONFIG
else
  do_fallback
fi
else
#Older version of FTB server.
whiptail --msgbox --fb "FTB install script not found! \n
This could be for a number of reasons but we will attempt to find a server.jar. \n
If this is an older server the eula may fail this is ok just try and run the server anyways." 20 60 0
do_fallback
rm $INSTALL_LOC/Files/modpacks.xml
fi
#EULA Needs to be accepted by the user
do_eula
touch $INSTALL_LOC/Files/player.list
do_Qboot
whiptail --msgbox --fb "Ok everything should now be ready for you to start. Please use (BSCC menu) also these servers could load slowly...give it some time \n
Also a big THANK YOU to all of the effort from MODS/DEVS involved in the FTB servers and maintenance" 20 60 0
rm $INSTALL_LOC/Files/modpacks.xml
fi

##Check for upgrade in progress..
if [[ ! -d $INSTALL_LOC/upgrade_backup ]]; then
exit 0
fi
}

do_ingame() {
  ALLTIME="/opt/BSCC/Files/Alltimeusers.list"
  unset playarr
  playarr=`cat $ALLTIME | cut -d "=" -f1 | awk '{print $1 " |"}'`
  playarr=(${playarr[@]})
  allowlist=`cat /opt/BSCC/Files/Allowed.list`
  allowlist=(${allowlist[@]})
  echo $oplist
  unset selected_player
  selected_player=$(whiptail --fb --menu "Select the user you would like to Allow Ingame Commands" 20 60 10  ${playarr[@]} 3>&1 1>&2 2>&3)
  RET=$?
  if [[ $RET -eq 0 ]]; then
  if [[ " ${allowlist[*]} " == *" $selected_player "* ]]; then
  whiptail --msgbox --fb "This user is already allowed, Removing them now." 20 60 0
    sed -i '/'$selected_player'/d' $INSTALL_LOC/Files/Allowed.list
  else
    echo $selected_player >> $INSTALL_LOC/Files/Allowed.list
  fi
fi
}

do_version_option() {
unset VAR
while true; do
VER=$(whiptail --title "Select Minecraft Version" --menu "Please select what version of Minecraft you wish to run" 15 80 5 \
"1 Vanilla Minecraft" "[Stright from Mojang.(Latest Version)]" \
"2 Spigot" "[Fast lightwaight Bucket style server.(Latest Version)]" \
"3 FTB" "[This will allow you to run a FTB server.]" \
"4 Restore" "[Attempt to restore a server from an archive.]" \
 3>&1 1>&2 2>&3)
  RET=$?
  if [[ $RET -eq 1 ]]; then
    exit 0
  elif [[ $RET -eq 0 ]]; then
    case "$VER" in
      1\ *) do_vanilla ;;
      2\ *) do_spigot ;;
      3\ *) do_ftb ;;
      4\ *) do_restore ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $VER" 20 60 1
  else
    exit 1
  fi
done
}

do_help() {
echo -e "${yellow}This is the list of commands"
echo -e "To use these commands do ./BSCC command. example ./BSCC help"
echo -e "${red}start ${green}[This will start your server without loading main menu.]"
echo -e "${red}stop ${green}[Fast and easy way to stop your server.]"
echo -e "${red}save ${green}[This runs minecrafts default save functions.]"
echo -e "${red}restart ${green}[This will prompt the server to restart in 5 minutes...backing up also]"
echo -e "${red}restart_now ${green}[Same as restart but only gives 10 second warning on restart.]"
echo -e "${red}archive ${green}[Does what it says, Unlike save this actually makes a conpressed save of the server.. A true backup.]"
echo -e "${red}rsync ${green}[Because the server is ran in the RAM (If your using ramdisk) you need to pull it from the ram and save to the HDD often, Fastest way to make saves]"
echo -e "${red}stats ${green}[Simple way to display information on the server about ram/cpu/storage/load]"
echo -e "${red}inventory ${green}[Adds the ability to quickly recover lost inventory from a list of the last 5 deaths]"
echo -e "${red}menu ${green}[Main Menu for core server controls.]"
echo -e "${red}debug ${green}[Select debug mode on/off.]"
tput sgr0
}


#GUI Menu Starts here!

do_start() {
 if ! screen -list | grep -q "Minecraft"; then
    cd $DIR
    $START
    sed -i 's/check=.*/check=true/g' $CONFIG
    whiptail --fb --msgbox "Your Server is loading up please check the client after a minute or so..." 20 60 1
    if ! screen -list | grep -q "WATCH"; then
    cd $INSTALL_LOC/Files/
    $WATCH
    if ! screen -list | grep -q "IN_GAME"; then
    $IN_GAME
fi
fi
else
    whiptail --fb --msgbox "Found a server running please stop it first!" 20 60 1
    do_Qstop
fi
}


do_stop() {
  if ! screen -list | grep -q "Minecraft"; then
    whiptail --fb --msgbox "There is no Server running right now, did you start it?" 20 60 1
else
    do_Qstop
fi
}

do_chat() {
INPUT=$(whiptail --fb --inputbox "You can chat here. No commands!." 10 80 --title "Chat Log" 3>&1 1>&2 2>&3)
RET=$?
if [[ $RET -eq 0 ]]; then
screen -S Minecraft -p 0 -X stuff "`printf "say $INPUT\r"`";
do_chat
fi
}

do_random_msg() {
INPUT=$(whiptail --fb --inputbox "Enter your random message here." 10 80  --title "Greeting MSG" 3>&1 1>&2 2>&3)
    echo $INPUT >> $INSTALL_LOC/Files/RandomMSG.txt
}

do_prop() {
#Check to make sure the arrey isn't present, Stops duplicates..
unset PROP
if [[ ${#PROP[@]} -eq 0 ]]; then
    PROP=`cat $SERVER_PROP | grep "=" | awk '{print $1 " |"}'`
    echo "No arrey found, Building"
fi
IFS=$'\r\n' GLOBIGNORE='*' command eval 'PROP=(${PROP[@]})'
SELECTED_PROP=$(whiptail --fb --menu "Server.Properties" 20 80 10 ${PROP[@]} 3>&1 1>&2 2>&3)
RET=$?
if [[ $RET -eq 0 ]]; then
#User has selected something.. time to edit
MOD_PROP=`cut -d "=" -f 2 <<< $SELECTED_PROP`
#Take new input
COMPLETE_PROP=$(whiptail --fb --inputbox "" 8 78 "$MOD_PROP" --title "Changing settings for ($SELECTED_PROP) " 3>&1 1>&2 2>&3)
RET=$?
if [[ $RET -eq 0 ]]; then
REPLACE_PROP=`cut -f1 -d "=" <<< $SELECTED_PROP`
sed -i 's/'$REPLACE_PROP'=.*/'$REPLACE_PROP'='$COMPLETE_PROP'/g' $SERVER_PROP
elif [[ $RET -eq 1 ]]; then
whiptail --msgbox --fb "Under development" 20 60 1 \
do_admin
  fi
fi
}

do_Qdeop() {
if (whiptail --title "DeOp Confirmation." --yesno "Are you sure you want to deOp $selected_player?" 8 78) then
    echo "User selected Yes, Deoping"
    screen -S Minecraft -p 0 -X stuff "`printf "deop $selected_player\r"`";
fi
}

do_op() {
  unset playarr
  playarr=`cat $PLAYERS | awk '{print $1 " |"}'`
  playarr=(${playarr[@]})
  oplist=`cat $DIR/ops.json | grep name | awk '{print $2}' | tr -d "\"" | cut -d "," -f1`
  oplist=(${oplist[@]})
  unset selected_player
  selected_player=$(whiptail --fb --menu "Select the user you would like to Op" 20 60 10  ${playarr[@]} 3>&1 1>&2 2>&3)
  RET=$?
  if [[ $RET -eq 0 ]]; then
  if [[ " ${oplist[*]} " == *" $selected_player "* ]]; then
  whiptail --msgbox --fb "This user is already Oped, moving to DeOp...." 20 60 0
    do_Qdeop 
  else
    screen -S Minecraft -p 0 -X stuff "`printf "op $selected_player\r"`";
  fi
fi
}

do_deop() {
unset oplist
oplist=`cat $DIR/ops.json | grep name | awk '{print $2}' | tr -d "\"" | cut -d "," -f1 | awk '{print $1 " |"}'`
oplist=(${oplist[@]})
#check if there are any Oped players first.
if [[ -z "$oplist" ]]; then
whiptail --msgbox --fb "You don't have any Oped players." 10 60 0
else
unset selected_player
selected_player=$(whiptail --fb --menu "Select the user you would like to DeOp" 20 60 10  ${oplist[@]} 3>&1 1>&2 2>&3)
  RET=$?
  if [[ $RET -eq 0 ]]; then
  do_Qdeop
fi
fi
}


do_Qstop() {
 whiptail --fb --yesno "Did you want to stop the server?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [[ $RET -eq 0 ]]; then
    sed -i 's/check=.*/check=false/g' $CONFIG
    screen -S Minecraft -p 0 -X stuff "stop$(printf \\r)"
    screen -X -S WATCH_LOGIN quit
    screen -X -S VANILLA_BACKUP quit
    screen -X -S IN_GAME quit
    whiptail --fb --msgbox "Stopping Server.." 20 60 1
  fi
}

do_delete() {
if screen -list | grep -q "Minecraft"; then
screen -S Minecraft -p 0 -X stuff "stop$(printf \\r)"
screen -X -S WATCH_LOGIN quit
screen -X -S VANILLA_BACKUP quit
screen -X -S IN_GAME quit
sleep 3
fi
if (whiptail --fb --yesno "YOUR ABOUT TO DELETE YOUR MINECRAFT SERVER...IF YOU DO THIS THERE IS NO GOING BACK! \


Think about those poor creepers when you pick your option here." --yes-button DELETE --no-button Leave_Now 20 60 ) then
	(
        sleep 2
	screen -X -S WATCH_LOGIN quit
    	screen -X -S VANILLA_BACKUP quit
        echo XXX
        echo 20
        echo "Searching for poor pigs to kill"
	rm -rf $DIR/*
        rm -rf $INSTALL_LOC/archive/*
        rm -rf $INSTALL_LOC/rsync_backup/*
        rm -rf $INSTALL_LOC/PD_Backup/*
	rm $INSTALL_LOC/Files/Alltimeusers.list
	touch $INSTALL_LOC/Files/Alltimeusers.list
	sed -i 's/MCVERSION=.*/MCVERSION=/g' $CONFIG
	sed -i 's/SERVERJAR=.*/SERVERJAR=/g' $CONFIG
	sed -i 's/VANILLA=.*/VANILLA=false/g' $CONFIG
        echo XXX
        sleep 2
        echo XXX
        echo 40
        echo "Deleting all mods"
        echo XXX
        sleep 2
        echo XXX
        echo 60
        echo "Smashing houses"
        echo XXX
        sleep 2
        echo XXX
        echo 80
        echo "Hitting Overworld with a comet"
        echo XXX
        sleep 2
        echo XXX
        echo 100
        echo "After the dust settles, you hear a faint creeper hiss..."
        echo XXX
        sleep 2
) | whiptail --gauge "Creapers scatter!" 8 60 0
	whiptail --fb --msgbox "Well we will just ignore that last few seconds and move on to a brighter world..." 20 60
fi

#See if they are looking to start fresh right now.
 whiptail --fb --yesno "Would you like to setup a new server right now?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [[ $RET -eq 0 ]]; then
    BSCC
    clear
    exit 0
  else
    whiptail --fb --msgbox "Just use (BSCC menu) when your ready to build a new world." 20 60
    exit 0
  fi
}

do_uninstall() {
whiptail --fb --yesno "This is your only chance to say no to this... \n
It will erase your server and everything involved with BSCC. \n
Do you agree?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [[ $RET -eq 0 ]]; then
    sudo rm -rf $INSTALL_LOC
    sudo rm /usr/bin/BSCC
    whiptail --msgbox --fb "Everything is now removed. I hope you enjoyed using BSCC and please leave a comment as to why your leaving. Thank you." 20 60 0
  else
    exit 0
  fi
}

do_op_menu() {
  while true; do
    FUN=$(whiptail --fb --title "Op/DeOP" --menu "Select Your option"  --cancel-button Back --ok-button Select 20 80 6 \
      "1 Op" "[Op a user]" \
      "2 DeOp" "[DeOp a user]" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [[ $RET -eq 1 ]]; then
    do_admin
    elif [[ $RET -eq 0 ]]; then
      case "$FUN" in
        1\ *) do_op ;;
	2\ *) do_deop ;;
        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
  done
}

do_admin_backupmenu() {
while true; do
  FUN=$(whiptail --fb --title "Backup/Restore" --menu "WARNING!!!"  --cancel-button Back --ok-button Select 20 80 4 \
    "1 Archive Server" "[The best way to save your server!]" \
    "2 Backup Server" "[Create a 1:1 copy of your server.]" \
    "3 Restore Server" "[Restore the server from a Archive Backup.]" \
    "4 User backup" "[Let's you define where to save a copy of your world]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [[ $RET -eq 1 ]]; then
    do_admin
  elif [[ $RET -eq 0 ]]; then
    case "$FUN" in
      1\ *) do_archive; whiptail --fb --msgbox "Your archive was created." 20 60 0 ;;
      2\ *) do_rsync; whiptail --fb --msgbox "Your backup was created." 20 60 0 ;;
      3\ *) do_restore ;;
      4\ *) do_user_backup ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
fi
done
}

do_cron() {
unset list commands varr
varr[0]='check |'
varr[1]='stats |'
varr[2]='archive |'
varr[3]='restart |'
varr[4]='REMOVE |'
varr=(${varr[@]})
crontabs="/var/spool/cron/crontabs"
whiptail --msgbox --fb "The next menu will let you set times for basic functions \n
CHECK=[How often the server should check if the server is up..if down it starts it.] \n
STATS=[Display system stats to the minecraft console to display to users online.] \n
ARCHIVE=[How often a archive should be done.] \n
RESTART=[how often a restart should be done.] \n
REMOVE=[Clear all crontab jobs.]" 20 90 0

list=$(whiptail --menu --fb "Select your task" 20 60 0 ${varr[@]} 3>&1 1>&2 2>&3)
if [[ "$list" = REMOVE ]]; then
whiptail --yesno --fb "This will remove all of your Cron Jobs!. Continue?" 20 60 0 \
  --yes-button Yes --no-button No
 RET=$?
   if [[ $RET -eq 0 ]]; then
    sudo sed -i".bak" '/BSCC*/d' $crontabs/$USER
    whiptail --fb --msgbox "CRON JOBS cleared." 20 60 1
    do_admin_advanced
 else
   if [[ $RET -eq 1 ]]; then
    do_admin_advanced
  fi
fi
fi
clear
  FUN=$(whiptail --fb --title "CRONTAB" --menu "Select how often you want this to be."  --cancel-button Back --ok-button Select 20 80 5 \
    "1 5" "[Minutes]" \
    "2 10" "[Minutes]" \
    "3 15" "[Minutes]" \
    "4 30" "[Minutes]" \
    "5 1" "[Hour]" \
    "6 2" "[Hours]" \
    "7 6" "[Hours]" \
    "8 12" "[Hours]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [[ $RET -eq 1 ]]; then
    do_admin_advanced
  elif [[ $RET -eq 0 ]]; then
    case "$FUN" in
      1\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "*/5 * * * * BSCC $list") | crontab - ;;
      2\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "*/10 * * * * BSCC $list") | crontab - ;;
      3\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "*/15 * * * * BSCC $list") | crontab - ;;
      4\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "*/30 * * * * BSCC $list") | crontab - ;;
      5\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "0 */1 * * * BSCC $list") | crontab - ;;
      6\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "0 */2 * * * BSCC $list") | crontab - ;;
      7\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "0 */6 * * * BSCC $list") | crontab - ;;
      8\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "0 */12 * * * BSCC $list") | crontab - ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
fi
}

do_upgrade_backup() {
        do_save
        do_no_menu_stop
for ((i=120;i>0;i=i-1)); do
        clear
        if screen -list | grep -q "Minecraft"; then
        clear
        echo -n "Waiting for Minecraft to stop for a clean backup!. Time Remaining $i seconds"
        sleep 1
        else
  cd $INSTALL_LOC/archive/
  rm -f UPGRADE_ROLLBACK.tar.gz
  rm $DIR/conf.cfg
  cp $INSTALL_LOC/Files/conf.cfg $DIR/conf.cfg
  tar -zcvf UPGRADE_ROLLBACK.tar.gz -C $DIR .
  break
  fi
done
}

do_upgrade() {
UPGRADE_TMP="/opt/BSCC/upgrade_backup"
source /opt/BSCC/Files/conf.cfg
if [[ "$SERVER_TYPE" = "VANILLA" ]]; then
	if [[ -d $UPGRADE_TMP ]]; then
	mv $UPGRADE_TMP/* $DIR
        do_no_menu_start
        whiptail --fb --msgbox "Your upgrade is now complete, Your server should be loading up now. \
In case it failed DO NOT RUN UPGRADE!!!. Run a restore first and restore the backup created called UPGRADE_ROLLBACK.tar.gz. \
This will roll you back to before your upgrade." 20 60 0
        rm -r $UPGRADE_TMP
	exit 0
	fi
	echo "a vanilla server was found!"
	sleep 3
        do_upgrade_backup
        mkdir $UPGRADE_TMP
        cd $DIR
        mv world ops.json server.properties $UPGRADE_TMP/
        rm -r *
        do_vanilla
fi
if [[ "$SERVER_TYPE" = "SPIGOT" ]]; then
        if [[ -d $UPGRADE_TMP ]]; then
        mv $UPGRADE_TMP/* $DIR
        do_no_menu_start
        whiptail --fb --msgbox "Your upgrade is now complete, Your server should be loading up now. \
In case it failed DO NOT RUN UPGRADE!!!. Run a restore first and restore the backup created called UPGRADE_ROLLBACK.tar.gz. \
This will roll you back to before your upgrade." 20 60 0
	sleep 2
	rm -r $UPGRADE_TMP
        exit 0
        fi
        echo "A Spigot server was found!"
        sleep 3
        do_upgrade_backup
        mkdir $UPGRADE_TMP
        cd $DIR
        mv world ops.json server.properties $UPGRADE_TMP/
        rm -r *
        do_spigot
fi
if [[ "$SERVER_TYPE" = "FTB" ]]; then
	echo "a FTB server was found!."
	sleep 3
        do_upgrade_backup
        mkdir $UPGRADE_TMP
        cd $DIR
        mv world ops.json server.properties $UPGRADE_TMP/
        rm -r *
        do_ftb
        mv $UPGRADE_TMP/* $DIR
	sleep 3
        do_no_menu_start
        whiptail --fb --msgbox "Your upgrade is now complete, Your server should be loading up now. \
In case it failed DO NOT RUN UPGRADE!!!. Run a restore first and restore the backup created called UPGRADE_ROLLBACK.tar.gz. \
This will roll you back to before your upgrade." 20 60 0
	screen -S Minecraft -p 0 -X stuff "/fml confirm$(printf \\r)"
	rm -r $UPGRADE_TMP
	exit 0
fi
if [[ -z $SERVER_TYPE]; then
        echo "Nothing found!"
        exit 0
fi
}

do_beta() {
while true; do
  FUN=$(whiptail --fb --title "BETA AREA!!!" --menu "Think Tank"  --cancel-button Exit --ok-button Select 20 80 2 \
    "1 Placeholder" "[]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [[ $RET -eq 1 ]]; then
     exit 1
  elif [[ $RET -eq 0 ]]; then
    case "$FUN" in
      1\ *) echo "Nothing to see here yet.." ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
fi
done
}

do_admin_advanced() {
while true; do
  FUN=$(whiptail --fb --title "Admin Advanced menu" --menu "WARNING!!!"  --cancel-button Back --ok-button Select 20 80 7 \
    "1 Crontab" "[Setup jobs for autostart and other things]" \
    "2 Upgrade" "[Will allow you to upgrade your server.jar]" \
    "3 Ingame Commands" "[Select users for Ingame Commands!]" \
    "4 Ram settings" "[Change your ram settings]" \
    "5 BETA" "[Think tank and testing]" \
    "6 DELETE SERVER" "[DELETES YOUR SERVER!!]" \
    "7 Uninstall BSCC" "[This will remove BSCC completely]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [[ $RET -eq 1 ]]; then
    do_admin
  elif [[ $RET -eq 0 ]]; then
    case "$FUN" in
      1\ *) do_cron ;;
      2\ *) do_upgrade ;;
      3\ *) do_ingame ;;
      4\ *) do_ram ;;
      5\ *) do_beta ;;
      6\ *) do_delete ;;
      7\ *) do_uninstall ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
fi
done
}

do_finish() {
  if [[ $ASK_TO_REBOOT -eq 1 ]]; then
    whiptail --fb --yesno "Would you like to reboot now?" 20 60 2
    if [[ $? -eq 0 ]]; then # yes
    echo " words lol"
    fi
  fi
  exit 0
}

do_admin() {
while true; do
  FUN=$(whiptail --fb --title "Admin Area" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 7 \
    "1 Console" "[Send/view console.]" \
    "2 Random MSG" "[Random Greating MSG]" \
    "3 Op/Deop" "[Select users to Op or DeOp]" \
    "4 Server Properties" "[Modify Server Properties]" \
    "5 Start on boot" "[Start the server on boot?]" \
    "6 Backup/Restore" "[For Restoring the server.]" \
    "7 Advanced menu" "[Upgrade & Delete servers]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [[ $RET -eq 1 ]]; then
     exit 1
  elif [[ $RET -eq 0 ]]; then
    case "$FUN" in
      1\ *) do_console ;;
      2\ *) do_random_msg ;;
      3\ *) do_op_menu ;;
      4\ *) do_prop ;;
      5\ *) do_Qboot ;;
      6\ *) do_admin_backupmenu ;;
      7\ *) do_admin_advanced ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
fi
done
}

do_menu() {
do_update
source /opt/BSCC/Files/conf.cfg
while true; do
  FUN=$(whiptail --fb --title "Main Menu, Build: $BSCC_VERSION" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 8 \
    "1 Admins only" "[Admin controls]" \
    "2 Start" "[Attempts to start the server]" \
    "3 Stop" "[Attempt to stop the server]" \
    "4 Inventory" "[Restore player's inventory]" \
    "5 Chat" "[Send chat directly to the server]" \
    "6 Info" "[Fast info about your device/server]" \
    "7 Storage Info" "[Where is all my space?? Look here!]" \
    "8 Update BSCC" "[Update script to keep the fun rolling]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [[ $RET -eq 1 ]]; then
    do_finish
  elif [[ $RET -eq 0 ]]; then
    case "$FUN" in
      1\ *) do_adminpass ;;
      2\ *) do_start ;;
      3\ *) do_stop ;;
      4\ *) do_inventory ;;
      5\ *) do_chat ;;
      6\ *) do_info ;;
      7\ *) do_storage ;;
      8\ *) do_update ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
}


do_info(){
if screen -list | grep -q "Minecraft"; then
STATUS="ONLINE"
else
STATUS="OFFLINE"
fi
server_port=$(cat $DIR/server.properties | grep "server-port" | cut -d "=" -f2)
on_now=$(ss -t | grep -o "$server_port" | wc -l)
max_on=$(cat /opt/BSCC/minecraft_server/server.properties | grep "max-players" | cut -d "=" -f2)
#Calculate accurate CPU usage.
cpufree=$(mpstat 1 1 | tail -n 1 | awk '{printf $12}')
CPU=$(echo "scale=1; x=100-$cpufree; if(x<1) print 0; x" | bc)
#Gather Internal and External IP
EXTERNAL_IP=$EIP
INTERNAL_IP=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
UPTIME=$(uptime | awk '{print $1}')
LOAD=$(uptime | grep -o "load average.*")
RAM=$(free -mh | grep Mem | awk '{print $4}')
TOTAL=$(du -sh /opt/BSCC/minecraft_server | awk '{print $1}')
HDD_TOTAL=$(df -kh . | grep / | awk '{print $4}')
JAVA_VERSION=$(java -version 2>&1 |awk 'NR==1{ gsub(/"/,""); print $3 }')
whiptail --fb --clear --title "Current server stats" --yesno --yes-button REFRESH --no-button Back \
"Server Status: $STATUS \n
BSCC Version: $BSCC_VERSION \n
Start on Boot: $startonboot \n
Server Version: $MCVERSION \n
Current Players Online: $on_now/$max_on \n
CPU Usage is: $CPU% \n
Server Uptime: $UPTIME \n
$LOAD \n
Ram Available: "$RAM\B"(Free/Total)"$RAM_TOTAL\B" \n
Server size on disk: $TOTAL(Used/Free)$HDD_TOTAL \n
Your Java Version is: $JAVA_VERSION \n
IP: $INTERNAL_IP|Remote IP: $EXTERNAL_IP" 35 55 10
CHOICES=$?
unset TOTAL on_list CPU LOAD UPTIME RAM STATUS
  if [[ $CHOICES -eq 0 ]]; then
   	do_info
fi
clear
}


do_storage() {
#Adjust this if you plan on placing your server in other directories!#

WORLD_NAME=$(cat /opt/BSCC/minecraft_server/server.properties | grep -o "level-name.*" | cut -d "=" -f2)
MC_SERVER_DIR=$(du -sh /opt/BSCC/minecraft_server/ | awk '{print $1}')
WORLD=$(du -sh /opt/BSCC/minecraft_server/$WORLD_NAME | awk '{print $1}')
ARCHIVE=$(du -sh /opt/BSCC/archive/ | awk '{print $1}')
PD_VANILLA_BACKUP=$(du -sh /opt/BSCC/PD_Backup/ | awk '{print $1}')
RSYNC_BACKUP=$(du -sh /opt/BSCC/rsync_backup | awk '{print $1}')
TOTAL_SERVER=$(du -sh /opt/BSCC/ | awk '{print $1}')
FREE_SPACE=$(df -kh . | grep / | awk '{print $4}')

#Gathering up info for storage.. and displaying
whiptail --fb --title "Current Server Storage" --msgbox \
"This lists your storage usage..\n
Minecraft server size: ${MC_SERVER_DIR}B \n
World size: ${WORLD}B \n
Backup size: ${RSYNC_BACKUP}B \n
Archive size: ${ARCHIVE}B \n
Total BSCC size: ${TOTAL_SERVER}B \n
Total HDD stoage free: ${FREE_SPACE}B"  25 50 8
unset MC_SERVER_DIR WORLD ARCHIVE PD_VANILLA_BACKUP RSYNC_BACKUP TOTAL_SERVER FREE_SPACE
}


#####################################################################
#Actually the beginning of this huge mess..also a catch for problems..
######################################################################
if [[ ! -f $DIR/$SERVERJAR ]]; then
if [[ $_DEBUG = on ]]; then
do_version_option
else
do_debug
do_version_option
fi
fi

#Extra Functions for cronjobs and debug (Down the road)
#Selection for Functions.

case "$1" in
  (menu)
    do_menu
    exit 0
    ;;
  (start)
    do_no_menu_start
    exit 0
    ;;
  (stop)
    do_no_menu_stop
    exit 0
    ;;
  (save)
    do_save
    exit 0
    ;;
  (boot)
    do_onboot
    exit 0
    ;;
  (check)
    do_check
    exit 0
    ;;
  (restart)
    do_restart
    exit 0
    ;;
  (restart_now)
    do_restart_now
    exit 0
    ;;
  (archive)
    do_archive
    exit 0
    ;;
  (rsync)
   do_rsync
   exit 0
    ;;
  (rollback)
    do_rollback
    exit 0
    ;;
  (stats)
    do_stats
    exit 0
    ;;
  (inventory)
   do_inventory
    exit 0
    ;;
  (info)
   do_info
    exit 0
    ;;
  (eula)
   do_eula
   do_menu
   exit 0
    ;;
  (help)
    do_help
    exit 0
    ;;
  (debug)
   do_debug
   exit 0
   ;;
  (*)
  echo -e "${yellow}Usage:${green} $0 ${red}{command}"
  echo -e "${yellow}For a list of commands use ${red}./BSCC help"
  tput sgr0
    exit 2
    ;;
esac 
DEBUG set +x

